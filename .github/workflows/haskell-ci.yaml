name: 'Regenerate haskell-ci workflows'

on:
  workflow_dispatch:
  schedule:
    # Run every Saturday
    - cron: '0 3 * * 6'

jobs:
  refresh:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        repo:
          - X11
          - X11-xft
          - xmonad
          - xmonad-contrib

    steps:
      - name: Clone project
        uses: actions/checkout@v4
        with:
          repository: xmonad/${{ matrix.repo }}
          path: project
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}

      - name: Clone haskell-ci
        uses: actions/checkout@v4
        with:
          repository: haskell-CI/haskell-ci
          path: haskell-ci

      - name: Get haskell-ci version
        id: haskell-ci-version
        working-directory: haskell-ci
        run: |
          { echo -n version=; git rev-parse HEAD; } >> $GITHUB_OUTPUT

      - name: Setup Haskell
        id: setup
        uses: haskell-actions/setup@v2
        with:
          ghc-version: 9.4

      - name: Cache cabal store
        uses: actions/cache@v3
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: cabal-store-${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}-haskell-ci-${{ steps.haskell-ci-version.outputs.version }}
          restore-keys: |
            cabal-store-${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}-

      - name: Install haskell-ci
        working-directory: haskell-ci
        run: |
          cabal install

      - name: Set up git user name/email
        run: |
          set -ex

          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

      - name: Create branch
        working-directory: project
        run: |
          git checkout -b haskell-ci-update

      - name: Update tested-with
        working-directory: project
        run: |
          set -ex -o pipefail

          ghc_versions=$(
            curl -LSsf https://raw.githubusercontent.com/haskell-actions/setup/main/src/versions.json \
            | jq -r '.ghc[]' \
            | sort --version-sort --reverse \
            | sort --version-sort --field-separator=. --key=1,2 --unique
          )
          ghc_oldest_full=$(grep '^tested-with:' *.cabal | grep -P -o 'GHC == \K\d+\.\d+\.\d+' | head)
          ghc_oldest="${ghc_oldest_full%.*}"
          ghc_oldest_newpatch=$(<<<"$ghc_versions" grep "^${ghc_oldest/./\\.}\.")
          tested_with=$(<<<"$ghc_versions" xargs printf ' || == %s' | sed "s/.*${ghc_oldest/./\\.}/GHC == $ghc_oldest/")
          sed -i "s/^\(tested-with:\s*\).*/\1${tested_with}/" *.cabal
          sed -i "s/${ghc_oldest_full/./\\.}/${ghc_oldest_newpatch}/g" *.cabal

          # commit if anything changed
          git diff --quiet --exit-code || git commit -a -m 'ci: Bump GHC patch versions in tested-with'

      - name: Regenerate haskell-ci
        working-directory: project
        run: |
          haskell-ci regenerate

          # commit if anything changed
          git diff --quiet --exit-code || git commit -a -m 'ci: Regenerate haskell-ci'

      - name: Create pull request if anything changed
        working-directory: project
        run: |
          set -ex

          # exit if there were no changes
          git remote set-head --auto origin
          git diff --quiet --exit-code origin/HEAD && exit

          # exit if there's already a haskell-ci-update branch with the same contents
          if git fetch origin haskell-ci-update; then
            git diff --quiet --exit-code FETCH_HEAD && exit
          fi

          git push -f -u origin haskell-ci-update:haskell-ci-update

          # open pull request if there isn't one already
          err=$(
            GITHUB_TOKEN="${ADMIN_GITHUB_TOKEN:?}" gh pr create \
              --title='ci: Regenerate haskell-ci' \
              --body='(automatic PR by https://github.com/liskin/xmonad-maintenance)' \
              2>&1
          ) && ret=$? || ret=$?
          if (( ret )) && [[ "$err" != *"a pull request for branch"*"already exists:"* ]]; then
            exit $?
          fi
        env:
          ADMIN_GITHUB_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}

  workflow-keepalive:
    runs-on: ubuntu-latest
    steps:
      - name: Re-enable workflow
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api -X PUT repos/${{ github.repository }}/actions/workflows/haskell-ci.yaml/enable
